#include <iostream>
#include <vector>
#include <cmath>
#include <array>
#include <algorithm>

const float pi = 3.141592653589793f;

std::vector<float> melp_lsf21pc(std::vector<float> &lsfs)
{
    std::vector<std::vector<float>> w(2, std::vector<float>(5));
    std::vector<float> f(10);
    std::fill(f.begin(), f.end(),0.0f);
    for (int i = 0; i < 10; i++)
    {
        lsfs[i] = pi * lsfs[i] / 4000;
    }
    for (int i = 0; i < 5; i++)
    {
        for (int j = 0; j < 2; j++)
        {
            w[j][i] = lsfs[(i * 2) + j];
        }
    }

    for (int i = 0; i < 2; i++)
    {
        for (int j = 0; j < 5; j++)
        {
            w[i][j] = std::cos(w[i][j]);
        }
    }
    f[0] = 0.5 * (-2 * w[0][0] - 2 * w[0][1] - 2 * w[0][2] - 2 * w[0][3] - 2 * w[0][4] - 2 * w[1][0] - 2 * w[1][1] - 2 * w[1][2] - 2 * w[1][3] - 2 * w[1][4]);

    f[1] = 0.5 * (10 - 2 * w[0][0] - 2 * w[0][1] - 2 * w[0][2] - 2 * w[1][4] -
                  2 * w[0][1] * (-2 * w[0][0] - 2 * w[0][4]) -
                  2 * w[0][2] * (-2 * w[0][0] - 2 * w[0][1] - 2 * w[0][4]) -
                  2 * w[0][3] * (-2 * w[0][0] - 2 * w[0][1] - 2 * w[0][3] - 2 * w[0][4]) -
                  2 * w[0][4] + 4 * w[0][0] * w[0][4] + 2 * w[1][0] + 2 * w[1][1] +
                  2 * w[1][2] + 2 * w[1][3] - 2 * w[1][1] * (-2 * w[1][0] - 2 * w[1][4]) -
                  2 * w[1][2] * (-2 * w[1][0] - 2 * w[1][1] - 2 * w[1][4]) -
                  2 * w[1][3] * (-2 * w[1][0] - 2 * w[1][1] - 2 * w[1][2] - 2 * w[1][4]) +
                  2 * w[1][4] + 4 * w[1][0] * w[1][4]);

    f[2] = 0.5 * (-8 * w[0][0] - 4 * w[0][1] - 2 * w[0][2] -
                  2 * w[0][1] * (-2 * w[0][0] - 2 * w[0][4]) -
                  2 * w[0][2] * (-2 * w[0][0] - 2 * w[0][1] - 2 * w[0][4]) -
                  2 * w[0][3] * (-2 * w[0][0] - 2 * w[0][1] - 2 * w[0][2] - 2 * w[0][4]) -
                  8 * w[0][4] + 4 * w[0][0] * w[1][4] -
                  2 * w[0][1] * (2 + 4 * w[0][0] * w[0][4]) -
                  2 * w[0][2] * (3 - 2 * w[0][1] * (-2 * w[0][0] - 2 * w[0][4]) + 4 * w[0][0] * w[0][4]) -
                  2 * w[0][3] * (4 - 2 * w[0][1] * (-2 * w[0][0] - 2 * w[0][4]) - 2 * w[0][2] * (-2 * w[0][0] - 2 * w[0][1] - 2 * w[0][4]) + 4 * w[0][0] * w[0][4]) - 8 * w[1][0] - 4 * w[1][1] - 2 * w[1][2] +
                  2 * w[1][1] * (-2 * w[1][0] - 2 * w[1][4]) +
                  2 * w[1][2] * (-2 * w[1][0] - 2 * w[1][1] - 2 * w[1][4]) +
                  2 * w[1][3] * (-2 * w[1][0] - 2 * w[1][1] - 2 * w[1][2] - 2 * w[1][4]) -
                  8 * w[1][4] - 4 * w[1][0] * w[1][4] -
                  2 * w[1][1] * (2 + 4 * w[1][0] * w[1][4]) -
                  2 * w[1][2] * (3 - 2 * w[1][1] * (-2 * w[1][0] - 2 * w[1][4]) + 4 * w[1][0] * w[1][4]) -
                  2 * w[1][3] * (4 - 2 * w[1][1] * (-2 * w[1][0] - 2 * w[1][4]) - 2 * w[1][2] * (-2 * w[1][0] - 2 * w[1][1] - 2 * w[1][4]) + 4 * w[1][0] * w[1][4]));
 
    f[3] = 0.5 * (20 - 8 * w[0][0] - 4 * w[0][1] - 2 * w[0][2] -
                  6 * w[0][1] * (-2 * w[0][0] -2 * w[0][4]) -
                  2 * w[0][2] * (-2 * w[0][0] - 2 * w[0][1] - 2 * w[0][4]) - 8 * w[0][4] +
                  12 * w[0][0] * w[0][4] - 2 * w[0][1] * (2 + 4 * w[0][0] * w[0][4]) -
                  2 * w[0][2] * (3 - 2 * w[0][1] * (-2 * w[0][0] - 2 * w[0][4]) + 4 * w[0][0] * w[0][4]) -
                  2 * w[0][3] * (4 - 2 * w[0][1] * (-2 * w[0][0] - 2 * w[0][4]) - 2 * w[0][2] * (-2 * w[0][0] - 2 * w[0][1] - 2 * w[0][4]) + 4 * w[0][0] * w[0][4]) -
                  2 * w[0][2] * (-4 * w[0][0] - 4 * w[0][4] - 2 * w[0][1] * (2 + 4 * w[0][0] * w[0][4])) -
                  2 * w[0][3] * (-6 * w[0][0] - 2 * w[0][1] - 6 * w[0][4] - 2 * w[0][1] * (2 + 4 * w[0][0] * w[0][4]) - 2 * w[0][2] * (3 - 2 * w[0][1] * (-2 * w[0][0] - 2 * w[0][4]) + 4 * w[0][0] * w[0][4])) + 8 * w[1][0] + 4 * w[1][1] + 2 * w[1][2] -
                  6 * w[1][1] * (-2 * w[1][0] - 2 * w[1][4]) -
                  2 * w[1][2] * (-2 * w[1][0] - 2 * w[1][1] - 2 * w[1][4]) + 8 * w[1][4] +
                  12 * w[1][0] * w[1][4] + 2 * w[1][1] * (2 + 4 * w[1][0] * w[1][4]) +
                  2 * w[1][2] * (3 - 2 * w[1][1] * (-2 * w[1][0] - 2 * w[1][4]) + 4 * w[1][0] * w[1][4]) +
                  2 * w[1][3] * (4 - 2 * w[1][1] * (-2 * w[1][1] - 2 * w[1][4]) - 2 * w[1][2] * (-2 * w[1][0] - 2 * w[1][1] - 2 * w[1][4]) + 4 * w[1][0] * w[1][4]) -
                  2 * w[1][2] * (-4 * w[1][0] - 4 * w[1][4] - 2 * w[1][1] * (2 + 4 * w[1][0] * w[1][4])) -
                  2 * w[1][3] * (-6 * w[1][0] - 2 * w[1][1] - 6 * w[1][4] - 2 * w[1][1] * (2 + 4 * w[1][0] * w[0][4]) - 2 * w[1][2] * (3 - 2 * w[1][1] * (-2 * w[1][0] - 2 * w[1][4]) + 4 * w[1][0] * w[1][4])));
    f[4] = 0.5 * (-12 * w[0][0] - 4 * w[0][1] - 6 * w[0][1] * (-2 * w[0][0] - 2 * w[0][4]) -
                  2 * w[0][2] * (-2 * w[0][0] - 2 * w[0][1] - 2 * w[0][4]) - 12 * w[0][4] +//
                  12 * w[0][0] * w[0][4] - 4 * w[0][1] * (2 + 4 * w[0][0] * w[0][4]) -
                  4 * w[0][2] * (3 - 2 * w[0][1] * (-2 * w[0][0] - 2 * w[0][4]) + 4 * w[0][0] * w[0][4]) -
                  2 * w[0][2] * (-4 * w[0][0] - 4 * w[0][4] - 2 * w[0][1] * (2 + 4 * w[0][0] * w[0][4])) -
                  2 * w[0][3] * (-6 * w[0][0] - 2 * w[0][1] - 6 * w[0][4] - 2 * w[0][1] * (2 + 4 * w[0][0] * w[0][4]) - 2 * w[0][2] * (3 - 2 * w[0][1] * (-2 * w[0][0] - 2 * w[0][4]) + 4 * w[0][1] * w[0][4])) -
                  2 * w[0][3] * (6 - 4 * w[0][1] * (-2 * w[0][0] - 2 * w[0][4]) + 8 * w[0][0] * w[0][4] - 2 * w[0][2] * (-4 * w[0][0] - 4 * w[0][4] - 2 * w[0][1] * (2 + 4 * w[0][0] * w[0][4]))) - 12 * w[1][0] -
                  4 * w[1][1] + 6 * w[1][1] * (-2 * w[1][0] - 2 * w[1][4]) +
                  2 * w[1][2] * (-2 * w[1][0] - 2 * w[1][1] - 2 * w[1][4]) - 12 * w[1][4] -
                  12 * w[1][0] * w[1][4] - 4 * w[1][1] * (2 + 4 * w[1][0] * w[1][4]) -
                  4 * w[1][2] * (3 - 2 * w[1][1] * (-2 * w[1][0] - 2 * w[1][4]) + 4 * w[1][0] * w[1][4]) +
                  2 * w[1][2] * (-4 * w[1][0] - 4 * w[1][4] - 2 * w[1][1] * (2 + 4 * w[1][0] * w[1][4])) +
                  2 * w[1][3] * (-6 * w[1][0] - 2 * w[1][1] - 6 * w[1][4] - 2 * w[1][1] * (2 + 4 * w[1][0] * w[1][4]) - 2 * w[1][2] * (3 - 2 * w[1][1] * (-2 * w[1][0] - 2 * w[1][4]) + 4 * w[1][0] * w[1][4])) -
                  2 * w[1][3] * (6 - 4 * w[1][1] * (-2 * w[1][0] - 2 * w[1][4]) + 8 * w[1][0] * w[1][4] - 2 * w[1][2] * (-4 * w[1][0] - 4 * w[1][4] - 2 * w[1][1] * (2 + 4 * w[1][0] * w[1][4]))));
    f[5] = 0.5 * (20 - 12 * w[0][0] - 4 * w[0][1] -
                  6 * w[0][1] * (-2 * w[0][0] - 2 * w[0][4]) -
                  2 * w[0][2] * (-2 * w[0][0] - 2 * w[0][1] - 2 * w[0][4]) - 12 * w[0][4] +
                  12 * w[0][0] * w[0][4] - 4 * w[0][1] * (2 + 4 * w[0][0] * w[0][4]) -
                  4 * w[0][2] * (3 - 2 * w[0][1] * (-2 * w[0][0] - 2 * w[0][4]) + 4 * w[0][0] * w[0][4]) -
                  2 * w[0][2] * (-4 * w[0][0] - 4 * w[0][4] - 2 * w[0][1] * (2 + 4 * w[0][0] * w[0][4])) -
                  2 * w[0][3] * (-6 * w[0][0] - 2 * w[0][1] - 6 * w[0][4] - 2 * w[0][1] * (2 + 4 * w[0][0] * w[0][4]) - 2 * w[0][2] * (3 - 2 * w[0][1] * (-2 * w[0][0] - 2 * w[0][4]) + 4 * w[0][0] * w[0][4])) -
                  2 * w[0][3] * (6 - 4 * w[0][1] * (-2 * w[0][0] - 2 * w[0][4]) + 8 * w[0][0] * w[0][4] - 2 * w[0][2] * (-4 * w[0][0] - 4 * w[0][4] - 2 * w[0][1] * (2 + 4 * w[0][0] * w[0][4]))) + 12 * w[1][2] +
                  4 * w[1][1] - 6 * w[1][1] * (-2 * w[1][0] - 2 * w[1][4]) -
                  2 * w[1][2] * (-2 * w[1][0] - 2 * w[1][1] - 2 * w[1][4]) + 12 * w[1][4] +
                  12 * w[1][0] * w[1][4] + 4 * w[1][1] * (2 + 4 * w[1][0] * w[1][4]) +
                  4 * w[1][2] * (3 - 2 * w[1][1] * (-2 * w[1][0] - 2 * w[1][4]) + 4 * w[1][0] * w[1][4]) -
                  2 * w[1][2] * (-4 * w[1][0] - 4 * w[1][4] - 2 * w[1][1] * (2 + 4 * w[1][0] * w[1][4])) -
                  2 * w[1][3] * (-6 * w[1][0] - 2 * w[1][1] - 6 * w[1][4] - 2 * w[1][1] * (2 + 4 * w[1][0] * w[1][4]) - 2 * w[1][2] * (3 - 2 * w[1][1] * (-2 * w[1][0] - 2 * w[1][4]) + 4 * w[1][0] * w[1][4])) +
                  2 * w[1][3] * (6 - 4 * w[1][1] * (-2 * w[1][0] - 2 * w[1][4]) + 8 * w[1][0] * w[1][4] - 2 * w[1][2] * (-4 * w[1][0] - 4 * w[1][4] - 2 * w[1][1] * (2 + 4 * w[1][0] * w[1][4]))));
    f[6] = 0.5 * (-8 * w[0][0] - 4 * w[0][1] - 2 * w[0][2] -
                  6 * w[0][1] * (-2 * w[0][0] - 2 * w[0][4]) -
                  2 * w[0][2] * (-2 * w[0][0] - 2 * w[0][1] - 2 * w[0][4]) - 8 * w[0][4] +
                  12 * w[0][0]* w[0][4] - 2 * w[0][1] * (2 + 4 * w[0][0] * w[0][4]) -
                  2 * w[0][2] * (3 - 2 * w[0][1] * (-2 * w[0][0] - 2 * w[0][4]) + 4 * w[0][0] * w[0][4]) -
                  2 * w[0][3] * (4 - 2 * w[0][1] * (-2 * w[0][0] - 2 * w[0][4]) - 2 * w[0][2] * (-2 * w[0][0] - 2 * w[0][1] - 2 * w[0][4]) + 4 * w[0][0] * w[0][4]) -
                  2 * w[0][2] * (-4 * w[0][0] - 4 * w[0][4] - 2 * w[0][1] * (2 + 4 * w[0][0] * w[0][4])) -
                  2 * w[0][3] * (-6 * w[0][0] - 2 * w[0][1] - 6 * w[0][4] - 2 * w[0][1] * (2 + 4 * w[0][0] * w[0][4]) - 2 * w[0][2] * (3 - 2 * w[0][1] * (-2 * w[0][0] - 2 * w[0][4]) + 4 * w[0][0] * w[0][4])) - 8 * w[1][0] - 4 * w[1][1] - 2 * w[1][2] +
                  6 * w[1][1] * (-2 * w[1][0] - 2 * w[1][4]) +
                  2 * w[1][2] * (-2 * w[1][0] - 2 * w[1][1] - 2 * w[1][4]) - 8 * w[1][4] -
                  12 * w[1][0] * w[1][4] - 2 * w[1][1] * (2 + 4 * w[1][0] * w[1][4]) -
                  2 * w[1][2] * (3 - 2 * w[1][1] * (-2 * w[1][0] - 2 * w[1][4]) + 4 * w[1][0] * w[1][4]) -
                  2 * w[1][3] * (4 - 2 * w[1][1] * (-2 * w[1][0] - 2 * w[1][4]) - 2 * w[1][2] * (-2 * w[1][0] - 2 * w[1][1] - 2 * w[1][4]) + 4 * w[1][0] * w[1][4]) +
                  2 * w[1][2] * (-4 * w[1][0] - 4 * w[1][4] - 2 * w[1][1] * (2 + 4 * w[1][0] * w[1][4])) +
                  2 * w[1][3] * (-6 * w[1][0] - 2 * w[1][1] - 6 * w[1][4] - 2 * w[1][1] * (2 + 4 * w[1][0] * w[1][4]) - 2 * w[1][2] * (3 - 2 * w[1][1] * (-2 * w[1][0] - 2 * w[1][4]) + 4 * w[1][0] * w[1][4])));
    f[7] = 0.5 * (10 - 8 * w[0][0] - 4 * w[0][1] - 2 * w[0][2] -
                  2 * w[0][1] * (-2 * w[0][0] - 2 * w[0][4]) -
                  2 * w[0][2] * (-2 * w[0][0] - 2 * w[0][1] - 2 * w[0][4]) -
                  2 * w[0][3] * (-2 * w[0][0] - 2 * w[0][1] - 2 * w[0][2] - 2 * w[0][4]) -
                  8 * w[0][4] + 4 * w[0][0] * w[0][4] -
                  2 * w[0][1] * (2 + 4 * w[0][0] * w[0][4]) -
                  2 * w[0][2] * (3 - 2 * w[0][1] * (-2 * w[0][0] - 2 * w[0][4]) + 4 * w[0][0] * w[0][4]) -
                  2 * w[0][3] * (4 - 2 * w[0][1] * (-2 * w[0][0] - 2 * w[0][4]) - 2 * w[0][2] * (-2 * w[0][0] - 2 * w[0][1] - 2 * w[0][4]) + 4 * w[0][0] * w[0][4]) +
                  8 * w[1][0] + 4 * w[1][1] + 2 * w[1][2] -
                  2 * w[1][1] * (-2 * w[1][0] - 2 * w[1][4]) -
                  2 * w[1][2] * (-2 * w[1][0] - 2 * w[1][1] - 2 * w[1][4]) -
                  2 * w[1][3] * (-2 * w[1][0] - 2 * w[1][1] - 2 * w[1][2] - 2 * w[1][4]) +
                  8 * w[1][4] + 4 * w[1][0] * w[1][4] +
                  2 * w[1][1] * (2 + 4 * w[1][0] * w[1][4]) +
                  2 * w[1][2] * (3 - 2 * w[1][1] * (-2 * w[1][0] - 2 * w[1][4]) + 4 * w[1][0] * w[1][4]) +
                  2 * w[1][3] * (4 - 2 * w[1][1] * (-2 * w[1][0] - 2 * w[1][4]) - 2 * w[1][2] * (-2 * w[1][0] - 2 * w[1][1] - 2 * w[1][4]) + 4 * w[1][0] * w[1][4]));
    f[8] = 0.5 * (-2 * w[0][0] - 2 * w[0][1] - 2 * w[0][2] - 2 * w[0][3] -
                  2 * w[0][1] * (-2 * w[0][0] - 2 * w[0][4]) -
                  2 * w[0][2] * (-2 * w[0][0] - 2 * w[0][1] - 2 * w[0][4]) -
                  2 * w[0][3] * (-2 * w[0][0] - 2 * w[0][1] - 2 * w[0][2] - 2 * w[0][4]) -
                  2 * w[0][4] + 4 * w[0][0] * w[0][4] - 2 * w[1][0] - 2 * w[1][1] -
                  2 * w[1][2] - 2 * w[1][3] + 2 * w[1][1] * (-2 * w[1][0] - 2 * w[1][4]) +
                  2 * w[1][2] * (-2 * w[1][0] - 2 * w[1][1] - 2 * w[1][4]) +
                  2 * w[1][3] * (-2 * w[1][0] - 2 * w[1][1] - 2 * w[1][2] - 2 * w[1][4]) -
                  2 * w[1][4] - 4 * w[1][0] * w[1][4]);
    f[9] = 0.5 * (2 - 2 * w[0][0] - 2 * w[0][1] - 2 * w[0][2] - 2 * w[0][3] - 2 * w[0][4] +
                  2 * w[1][0] + 2 * w[1][1] + 2 * w[1][2] + 2 * w[1][3] + 2 * w[1][4]);
    return f;
}

int main()
{
    std::vector<float> lsfs = {204.578376, 355.21086, 842.26336, 1162.29394, 1584.92658,
                               2008.223452, 2459.757432, 3022.959536, 3305.890072, 3552.423452};
    std::vector<float> result = melp_lsf21pc(lsfs);

    std::cout << "Result: ";
    for (const float &value : result)
    {
        std::cout << value << " ";
    }
    std::cout << std::endl;

    return 0;
}